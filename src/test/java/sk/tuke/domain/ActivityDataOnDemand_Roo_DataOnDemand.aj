// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package sk.tuke.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import sk.tuke.domain.Activity;
import sk.tuke.domain.ActivityDataOnDemand;
import sk.tuke.domain.Project;
import sk.tuke.domain.ProjectDataOnDemand;

privileged aspect ActivityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ActivityDataOnDemand: @Component;
    
    private Random ActivityDataOnDemand.rnd = new SecureRandom();
    
    private List<Activity> ActivityDataOnDemand.data;
    
    @Autowired
    ProjectDataOnDemand ActivityDataOnDemand.projectDataOnDemand;
    
    public Activity ActivityDataOnDemand.getNewTransientActivity(int index) {
        Activity obj = new Activity();
        setDateOfTermination(obj, index);
        setHourlyWage(obj, index);
        setNameOfActivity(obj, index);
        setProject(obj, index);
        setTimeToFinish(obj, index);
        return obj;
    }
    
    public void ActivityDataOnDemand.setDateOfTermination(Activity obj, int index) {
        Date dateOfTermination = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfTermination(dateOfTermination);
    }
    
    public void ActivityDataOnDemand.setHourlyWage(Activity obj, int index) {
        Float hourlyWage = new Integer(index).floatValue();
        obj.setHourlyWage(hourlyWage);
    }
    
    public void ActivityDataOnDemand.setNameOfActivity(Activity obj, int index) {
        String nameOfActivity = "nameOfActivity_" + index;
        obj.setNameOfActivity(nameOfActivity);
    }
    
    public void ActivityDataOnDemand.setProject(Activity obj, int index) {
        Project project = projectDataOnDemand.getRandomProject();
        obj.setProject(project);
    }
    
    public void ActivityDataOnDemand.setTimeToFinish(Activity obj, int index) {
        Float timeToFinish = new Integer(index).floatValue();
        obj.setTimeToFinish(timeToFinish);
    }
    
    public Activity ActivityDataOnDemand.getSpecificActivity(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Activity obj = data.get(index);
        Long id = obj.getId();
        return Activity.findActivity(id);
    }
    
    public Activity ActivityDataOnDemand.getRandomActivity() {
        init();
        Activity obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Activity.findActivity(id);
    }
    
    public boolean ActivityDataOnDemand.modifyActivity(Activity obj) {
        return false;
    }
    
    public void ActivityDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Activity.findActivityEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Activity' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Activity>();
        for (int i = 0; i < 10; i++) {
            Activity obj = getNewTransientActivity(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
